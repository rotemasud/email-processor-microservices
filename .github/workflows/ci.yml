name: CI - Build and Test

# NOTE: This workflow requires AWS credentials to be configured as GitHub Secrets:
#   - AWS_ACCESS_KEY_ID
#   - AWS_SECRET_ACCESS_KEY
#   - AWS_ACCOUNT_ID
# If you fork this repo, you'll need to set up your own AWS credentials and ECR repositories.

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-1.amazonaws.com

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [microservice-1, microservice-2]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests for ${{ matrix.service }}
      run: |
        cd ${{ matrix.service }}
        mvn clean test

    - name: Build Docker image for ${{ matrix.service }}
      run: |
        cd ${{ matrix.service }}
        docker build -t ${{ matrix.service }}:${{ github.sha }} .
        docker tag ${{ matrix.service }}:${{ github.sha }} ${{ matrix.service }}:latest

    - name: Configure AWS credentials
      # Only run AWS deployment on the original repository, not on forks
      if: github.repository_owner == 'rotemm' && github.event_name == 'push'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: github.repository_owner == 'rotemm' && github.event_name == 'push'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      if: github.repository_owner == 'rotemm' && github.event_name == 'push'
      env:
        ECR_REPOSITORY: email-processor-${{ matrix.service }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a new container image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./${{ matrix.service }}
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push the image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Output image URI
      if: github.repository_owner == 'rotemm' && github.event_name == 'push'
      run: |
        echo "Image URI: ${{ steps.build-and-push.outputs.image }}"
