name: CI - Build and Test

# NOTE: This workflow uses OIDC to authenticate with AWS (no long-lived credentials needed)
# The workflow assumes the IAM role: arn:aws:iam::256344107989:role/GitHubActionsRole
# If you fork this repo, you'll need to set up your own IAM role and ECR repositories.

# This workflow runs ONLY on manual trigger to save costs and give you control
on:
  workflow_dispatch:
    inputs:
      aws_account_id:
        description: 'AWS Account ID (12-digit number for ECR registry)'
        required: true
        default: '256344107989'
        type: string
      skip_ecr_push:
        description: 'Skip pushing to ECR (just build and test locally)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-west-1
  ECR_REGISTRY: ${{ github.event.inputs.aws_account_id }}.dkr.ecr.us-west-1.amazonaws.com

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # Required for OIDC authentication
    permissions:
      id-token: write   # Required to request JWT for OIDC
      contents: read    # Required to checkout code
    strategy:
      matrix:
        service: [microservice-1, microservice-2]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests for ${{ matrix.service }}
      run: |
        cd ${{ matrix.service }}
        mvn clean test

    - name: Build Docker image for ${{ matrix.service }}
      run: |
        cd ${{ matrix.service }}
        docker build -t ${{ matrix.service }}:${{ github.sha }} .
        docker tag ${{ matrix.service }}:${{ github.sha }} ${{ matrix.service }}:latest

    - name: Configure AWS credentials
      # Only run AWS steps if not skipping ECR push and on original repository
      if: github.repository_owner == 'rotemasud' && github.event.inputs.skip_ecr_push != 'true'
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::256344107989:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: github.repository_owner == 'rotemasud' && github.event.inputs.skip_ecr_push != 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      if: github.repository_owner == 'rotemasud' && github.event.inputs.skip_ecr_push != 'true'
      env:
        ECR_REPOSITORY: email-processor-${{ matrix.service }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a new container image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./${{ matrix.service }}
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push the image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Output image URI
      if: github.repository_owner == 'rotemasud' && github.event.inputs.skip_ecr_push != 'true'
      run: |
        echo "Image URI: ${{ steps.build-and-push.outputs.image }}"
    
    - name: Summary
      run: |
        echo "✅ Build and test completed for ${{ matrix.service }}"
        if [ "${{ github.event.inputs.skip_ecr_push }}" = "true" ]; then
          echo "⏭️ Skipped ECR push as requested"
        else
          echo "🚀 Images pushed to ECR"
        fi
