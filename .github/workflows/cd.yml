name: CD - Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (microservice-1, microservice-2, or both)'
        required: true
        default: 'both'
        type: choice
        options:
        - both
        - microservice-1
        - microservice-2
      image_tag:
        description: 'Image tag to deploy (default: latest)'
        required: false
        default: 'latest'
        type: string
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'terraform/**'

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
  ECS_CLUSTER: email-processor-cluster

jobs:
  deploy-microservice-1:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.service == 'both' || github.event.inputs.service == 'microservice-1' || (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip microservice-1]')) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set image tag
      id: set-image-tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Deploy microservice-1 to ECS
      env:
        ECR_REPOSITORY: email-processor-microservice-1
        ECS_SERVICE: email-processor-microservice-1
        ECS_TASK_DEFINITION: email-processor-microservice-1
        CONTAINER_NAME: microservice-1
      run: |
        # Get the latest task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition)
        
        # Update the image URI in the task definition
        NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-image-tag.outputs.tag }}" '.containerDefinitions[0].image = $IMAGE')
        
        # Remove fields that shouldn't be in the new task definition
        NEW_TASK_DEFINITION=$(echo $NEW_TASK_DEFINITION | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)')
        
        # Register the new task definition
        NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Update the service with the new task definition
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_DEFINITION_ARN
        
        echo "Deployment initiated for microservice-1 with task definition: $NEW_TASK_DEFINITION_ARN"

    - name: Wait for deployment to complete
      env:
        ECS_SERVICE: email-processor-microservice-1
      run: |
        echo "Waiting for deployment to complete..."
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
        echo "Deployment completed successfully!"

  deploy-microservice-2:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.service == 'both' || github.event.inputs.service == 'microservice-2' || (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip microservice-2]')) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set image tag
      id: set-image-tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Deploy microservice-2 to ECS
      env:
        ECR_REPOSITORY: email-processor-microservice-2
        ECS_SERVICE: email-processor-microservice-2
        ECS_TASK_DEFINITION: email-processor-microservice-2
        CONTAINER_NAME: microservice-2
      run: |
        # Get the latest task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition)
        
        # Update the image URI in the task definition
        NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-image-tag.outputs.tag }}" '.containerDefinitions[0].image = $IMAGE')
        
        # Remove fields that shouldn't be in the new task definition
        NEW_TASK_DEFINITION=$(echo $NEW_TASK_DEFINITION | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)')
        
        # Register the new task definition
        NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Update the service with the new task definition
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_DEFINITION_ARN
        
        echo "Deployment initiated for microservice-2 with task definition: $NEW_TASK_DEFINITION_ARN"

    - name: Wait for deployment to complete
      env:
        ECS_SERVICE: email-processor-microservice-2
      run: |
        echo "Waiting for deployment to complete..."
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
        echo "Deployment completed successfully!"

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-microservice-1, deploy-microservice-2]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-microservice-1.result }}" = "success" ] && [ "${{ needs.deploy-microservice-2.result }}" = "success" ]; then
          echo "✅ All services deployed successfully!"
        elif [ "${{ needs.deploy-microservice-1.result }}" = "success" ] || [ "${{ needs.deploy-microservice-2.result }}" = "success" ]; then
          echo "⚠️ Partial deployment completed"
        else
          echo "❌ Deployment failed"
          exit 1
        fi
